Forward = moves turtle forward in its current heading by pixels distance\nreturns the value of pixels
Backward = moves turtle backward in its current heading by pixels distance\nreturns the value of pixels
Left = turns turtle counterclockwise by degrees angle\nreturns the value of degrees
Right = turns turtle clockwise by degrees angle\nreturns the value of degrees
SetHeading = turns turtle to an absolute heading\nreturns number of degrees moved
SetTowards = turns turtle to face the point (x, y), where (0, 0) is the center of the screen\nreturns the number of degrees turtle turned
SetPosition = moves turtle to an absolute screen position, where (0, 0) is the center of the screen\nreturns the distance turtle moved
PenDown = puts pen down such that when the turtle moves, it leaves a trail\nreturns 1
PenUp = puts pen up such that when the turtle moves, it does not leave a trail\nreturns 0
ShowTurtle = makes turtle visible\nreturns 1
HideTurtle = makes turtle invisible\nreturns 0
Home = moves turtle to the center of the screen (0 0)\nreturns the distance turtle moved
ClearScreen = erases turtle's trails and sends it to the home position\nreturns the distance turtle moved

XCoordinate = returns the turtle's X coordinate from the center of the screen
YCoordinate = returns the turtle's Y coordinate from the center of the screen
Heading = returns the turtle's heading in degrees
IsPenDown = returns 1 if turtle's pen is down, 0 if it is up
IsShowing = returns 1 if turtle is showing, 0 if it is hiding

Sum = returns sum of the values of expr1 and expr2
Difference = returns difference of the values of expr1 and expr2
Product = returns product of the values of expr1 and expr2
Quotient = returns quotient of the values of expr1 and expr2
Remainder returns remainder on dividing the values of expr1 by expr2
Minus returns negative of the values of expr
Random returns random non-negative number strictly less than max
Sine = returns sine of degrees
Cosine = return cosine of degrees
Tangent = returns tangent of degrees
ArcTangent = returns arctangent of degrees
NaturalLog = returns natural log of expr
Power = returns base raised to the power of the exponent
Pi = Reports the number Pi

LessThan = returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0
GreaterThan = returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0
Equal = returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0
NotEqual = returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0
And = returns 1 if test1 and test2 are non-zero, otherwise 0
Or = returns 1 if test1 or test2 are non-zero, otherwise 0
Not = returns 1 if test is 0 and 0 if test is non-zero

MakeVariable = assigns the value of expr to variable, creating the variable if necessary\nreturns expr
Repeat = runs command(s) given in the list the value of expr number of times\nreturns the value of the final command executed (or 0 if no commands are executed)\n    note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount \n    so that it can be accessed by the command(s)
DoTimes = runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive\nreturns the value of the final command executed (or 0 if no commands are executed)\n    note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
For = runs command(s) for each value specified in the range, i.e., from (start - end), going by increment\nreturns the value of the final command executed (or 0 if no commands are executed)\n    note, variable is assigned to each succeeding value so that it can be accessed by the command(s)
If = if expr is not 0, runs the command(s) given in the list\nreturns the value of the final command executed ( (or 0 if no commands are executed)
IfElse = if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list\nreturns the value of the final command executed (or 0 if no commands are executed)
MakeUserCommand = assigns command(s) given in the second list to commandName using parameters given in first list as variables\nwhen commandName is used later in a program, any given values are assigned to variables\nthat can be accessed when the command list is run and the value of the final command\nexecuted is returned (or 0 if no commands are executed)\nreturns 1 if command is successfully defined, otherwise 0
